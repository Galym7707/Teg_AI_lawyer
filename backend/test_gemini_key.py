import os
from dotenv import load_dotenv
import logging
import google.generativeai as genai

# Set up logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
log = logging.getLogger(__name__)

def test_gemini_key():
    """Test if GEMINI_API_KEY is set and can be used with google-generativeai."""
    env_path = os.path.join(os.path.dirname(__file__), '.env')
    log.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏: {env_path}")
    if not os.path.exists(env_path):
        log.error(f"‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {env_path}")
        return False
    
    loaded = load_dotenv(env_path)
    log.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ .env: {loaded}")
    
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        log.error("‚ùå GEMINI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
        return False
    
    log.info("‚úÖ GEMINI_API_KEY –Ω–∞–π–¥–µ–Ω: %s", api_key[:4] + "..." + api_key[-4:])
    
    try:
        genai.configure(api_key=api_key)
        log.info("‚úÖ Gemini API —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω")
        model = genai.GenerativeModel('gemini-1.5-pro')
        response = model.generate_content("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: —á—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–∫–æ–Ω?")
        log.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Gemini: %s", response.text[:100] + "...")
        return True
    except Exception as e:
        log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini API: %s", str(e))
        return False

if __name__ == "__main__":
    log.info("üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ GEMINI_API_KEY")
    test_gemini_key()