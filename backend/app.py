# -*- coding: utf-8 -*-
import os
import json
import logging
from typing import Dict, Tuple, List
from flask import Flask, request, jsonify, make_response
from flask_cors import CORS

# === Gemini ===
import google.generativeai as genai

from helpers import (
    load_laws,
    search_laws,
    detect_intent,
    get_playbook_html,
)

# ---------- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(level=LOG_LEVEL, format="%(asctime)s - %(levelname)s - %(message)s")
log = logging.getLogger(__name__)

def _preview_bytes(b: bytes, limit: int = 800) -> str:
    try:
        t = b.decode("utf-8", errors="replace")
    except Exception:
        return f"<{len(b)} bytes, decode failed>"
    t = t.strip().replace("\n", "\\n")
    return (t[:limit] + ("‚Ä¶" if len(t) > limit else "")) or "<empty>"

# ---------- Flask ----------
app = Flask(__name__)

FRONTEND_ORIGIN = os.getenv("FRONTEND_ORIGIN", "*")
CORS(app, origins=[FRONTEND_ORIGIN] if FRONTEND_ORIGIN != "*" else "*", supports_credentials=True)
if FRONTEND_ORIGIN and FRONTEND_ORIGIN != "*":
    log.info(f"‚úÖ CORS –≤–∫–ª—é—á—ë–Ω –¥–ª—è: {FRONTEND_ORIGIN}")
else:
    log.warning("‚ö†Ô∏è  FRONTEND_ORIGIN –Ω–µ –∑–∞–¥–∞–Ω ‚Äî CORS –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö (dev only).")

@app.after_request
def _after(resp):
    # –î—É–±–ª–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (Netlify/Proxy –∫–∞–ø—Ä–∏–∑–Ω—ã)
    origin = FRONTEND_ORIGIN if FRONTEND_ORIGIN else "*"
    resp.headers["Access-Control-Allow-Origin"] = origin
    resp.headers["Access-Control-Allow-Methods"] = "GET, POST, OPTIONS"
    resp.headers["Access-Control-Allow-Headers"] = "Content-Type, Authorization"
    resp.headers["Access-Control-Allow-Credentials"] = "true"
    logging.debug("‚¨ÖÔ∏è  %s %s -> %s CT:%s",
                  request.method, request.path, resp.status_code,
                  resp.headers.get("Content-Type"))
    return resp

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–æ–Ω–æ–≤ ----------
LAWS_PATH = os.getenv("LAWS_PATH", "laws/kazakh_laws.json")
try:
    LAWS = load_laws(LAWS_PATH)
    log.info(f"‚úÖ –ò–Ω–¥–µ–∫—Å –∑–∞–∫–æ–Ω–æ–≤ –≥–æ—Ç–æ–≤: {len(LAWS)} —Å—Ç–∞—Ç–µ–π")
except Exception as e:
    LAWS = []
    log.exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–æ–Ω—ã: {e}")

# ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini ----------
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "").strip()
GEMINI_MODEL = os.getenv("GEMINI_MODEL", "gemini-1.5-flash")  # –ø–æ–ø—Ä–æ–±—É–π—Ç–µ 'gemini-1.5-pro' –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
LLM_ENABLED = bool(GEMINI_API_KEY)

if LLM_ENABLED:
    genai.configure(api_key=GEMINI_API_KEY)
    try:
        model = genai.GenerativeModel(
            model_name=GEMINI_MODEL,
            system_instruction="""
–¢—ã ‚Äî –ò–ò-—é—Ä–∏—Å—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. **–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –≤ HTML**.

–ñ—ë—Å—Ç–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1) –ù–ò–ö–û–ì–î–ê –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Å—è —Ñ—Ä–∞–∑–æ–π ¬´–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —é—Ä–∏—Å—Ç—É¬ª. –ï—Å–ª–∏ —Ä–∏—Å–∫ –≤—ã—Å–æ–∫–∏–π ‚Äî –∫—Ä–∞—Ç–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –¥–∞–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π.
2) –ï—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ—Ä–º—ã –≤ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ö –Ω–µ—Ç ‚Äî –¥–æ–ø–æ–ª–Ω–∏ –æ—Ç–≤–µ—Ç ¬´–æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π¬ª (–æ—Ç–º–µ—Ç—å —ç—Ç–æ), –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ:
   ‚Ä¢ –¥–∞–π ¬´–Æ—Ä–∏–¥–∏—á–µ—Å–∫—É—é –æ—Ü–µ–Ω–∫—É¬ª;
   ‚Ä¢ –¥–∞–π ¬´–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ—à–∞–≥–æ–≤–æ¬ª (–∫–æ—Ä–æ—Ç–∫–∏–µ –∏–º–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ —à–∞–≥–∏);
   ‚Ä¢ –¥–∞–π ¬´–î–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å—Å—ã–ª–∫–∏¬ª (–µ—Å–ª–∏ –µ—Å—Ç—å).
3) –í—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏ –æ—Ç–≤–µ—Ç **–≤ —á–∏—Å—Ç–æ–º HTML**, –±–µ–∑ Markdown, —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
   <h3>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞</h3>
   <p>‚Ä¶</p>
   <h3>–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ—à–∞–≥–æ–≤–æ</h3>
   <ul><li>–®–∞–≥ 1: ‚Ä¶</li> ‚Ä¶</ul>
   <h3>–î–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å—Å—ã–ª–∫–∏</h3>
   <ul>‚Ä¶</ul>
   <details><summary>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã</summary>‚Ä¶</details>  (–µ—Å–ª–∏ –Ω–æ—Ä–º—ã –µ—Å—Ç—å)
4) –ï—Å–ª–∏ –æ–ø–∏—Ä–∞–µ—à—å—Å—è –Ω–∞ –æ–±—â—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –∏–ª–∏ —Ç–∏–ø–æ–≤—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã ‚Äî —è–≤–Ω–æ –ø–æ–º–µ—Ç—å —ç—Ç–æ —Ñ—Ä–∞–∑–æ–π ¬´–ü–æ –æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–µ –≤ –†–ö: ‚Ä¶¬ª.
5) –ò–∑–±–µ–≥–∞–π –ª–∏—à–Ω–µ–π ¬´–≤–æ–¥—ã¬ª –∏ –æ–±—â–∏—Ö —Å–æ–≤–µ—Ç–æ–≤. –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞ –≤–∞–∂–Ω–µ–µ.

–í–∞–∂–Ω–æ–µ –ø—Ä–æ —Å—Ç–∏–ª—å:
- –ò—Å–ø–æ–ª—å–∑—É–π <p>, <ul>, <ol>, <li>, <strong>, <em>, <h3>, <details>, <summary>, <a>.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π **Markdown**.
- –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –±–µ–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞.
""".strip()
        )
        log.info(f"ü§ñ Gemini –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {GEMINI_MODEL}")
    except Exception:
        log.exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Gemini")
        LLM_ENABLED = False
else:
    log.warning("‚ö†Ô∏è GEMINI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî LLM –æ—Ç–∫–ª—é—á—ë–Ω.")

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def get_json_payload() -> Tuple[Dict, Dict]:
    headers = {k.lower(): v for k, v in request.headers.items()}
    ctype = headers.get("content-type", "")
    raw = request.get_data()
    log.debug(
        "‚û°Ô∏è  Incoming %s %s | CT: %s | H: %s | body: %s",
        request.method, request.path, ctype, headers, _preview_bytes(raw)
    )

    payload = None
    err = None
    try:
        payload = request.get_json(silent=True, force=False)
        if payload is None and raw:
            payload = json.loads(raw.decode("utf-8", errors="replace"))
    except Exception as e:
        err = f"JSON parse failed: {e}"

    return payload or {}, {"content_type": ctype, "body_preview": _preview_bytes(raw), "json_error": err}

def json_error(status: int, code: str, message: str, debug: Dict = None):
    body = {"ok": False, "error": {"code": code, "message": message}}
    if debug:
        body["debug"] = debug
    resp = make_response(jsonify(body), status)
    resp.headers["Content-Type"] = "application/json; charset=utf-8"
    return resp

# ---------- –†–æ—É—Ç—ã ----------
@app.route("/api/health", methods=["GET"])
def api_health():
    return jsonify({"ok": True, "laws_count": len(LAWS), "llm": LLM_ENABLED, "message": "alive"})

@app.route("/api/echo", methods=["POST", "OPTIONS"])
def api_echo():
    if request.method == "OPTIONS":
        return ("", 204)
    payload, dbg = get_json_payload()
    return jsonify({"ok": True, "received": payload, "debug": dbg})

def _call_llm(question: str, intent: str, law_hits: List[Tuple[Dict, float]]) -> str:
    """
    –°–æ–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –º–æ–¥–µ–ª–∏: –≤–æ–ø—Ä–æ—Å, playbook –ø–æ —Ç–µ–º–µ –∏ —Å–æ–≤–ø–∞–≤—à–∏–µ –Ω–æ—Ä–º—ã.
    –ú–æ–¥–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π HTML.
    """
    playbook_html = get_playbook_html(intent)

    norms_html = ""
    if law_hits:
        norms_items = []
        for art, score in law_hits:
            t = (art.get("title") or "").strip()
            s = (art.get("source") or "").strip()
            frag = (art.get("text") or "")[:800].strip().replace("\n", " ")
            norms_items.append(
                f'<li><strong>{t}</strong> ‚Äî score {score:.2f} '
                f'{(" | " + f"<a href=\"%s\" target=\"_blank\">–∏—Å—Ç–æ—á–Ω–∏–∫</a>" % s) if s else ""}'
                f'<br><em>–§—Ä–∞–≥–º–µ–Ω—Ç:</em> {frag}</li>'
            )
        norms_html = "<details><summary>–ù–æ—Ä–º—ã, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ –±–∞–∑–µ</summary><ul>" + "".join(norms_items) + "</ul></details>"

    user_prompt = f"""
–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–†–ö): {question}

{('<h3>–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ —Ç–µ–º–µ</h3>' + playbook_html) if playbook_html else ''}

{norms_html if norms_html else '<!-- –Ω–æ—Ä–º –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ; –≤—Å—ë —Ä–∞–≤–Ω–æ –¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏ –ø–æ –æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–µ –†–ö -->'}

–°—Ñ–æ—Ä–º–∏—Ä—É–π –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ **HTML**, –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –∏–∑ system_instruction.
""".strip()

    log.debug("üß† Prompt to LLM (preview): %s", user_prompt[:1200])

    resp = model.generate_content(
        contents=[{"role": "user", "parts": [{"text": user_prompt}]}],
        generation_config={
            "temperature": 0.2,
            "top_p": 0.9,
            "top_k": 40,
            "max_output_tokens": 1536,
        },
        safety_settings=[  # –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–µ —Ç–µ–º—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –Ω–æ —Å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –ø–æ–¥–∞—á–µ–π
            {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
            {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
            {"category": "HARM_CATEGORY_SEXUAL", "threshold": "BLOCK_NONE"},
            {"category": "HARM_CATEGORY_DANGEROUS", "threshold": "BLOCK_NONE"},
        ],
    )
    html = (resp.text or "").strip()
    if not html:
        html = "<p><strong>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞–º–µ—Ç–∫–∞:</strong> –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. –ù–∏–∂–µ ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.</p>"
        html += playbook_html or ""
    return html

def _pipeline_answer(question: str) -> Dict:
    # 1) –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
    intent = detect_intent(question)
    # 2) –ø–æ–∏—Å–∫ –Ω–æ—Ä–º
    hits, _ = search_laws(question, LAWS, top_k=3)
    # 3) LLM
    if LLM_ENABLED:
        answer_html = _call_llm(question, intent["name"], hits)
    else:
        # –§–æ–ª–±—ç–∫ –±–µ–∑ –º–æ–¥–µ–ª–∏ ‚Äî —Ö–æ—Ç—è –≤—ã –ø—Ä–æ—Å–∏–ª–∏ ¬´–º–æ–¥–µ–ª—å –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–∞¬ª, –æ—Å—Ç–∞–≤–ª—é –Ω–∞ –≤—Å—è–∫–∏–π
        from helpers import build_minimal_html_answer
        answer_html = build_minimal_html_answer(question, hits, intent)
    return {
        "answer_html": answer_html,
        "matches": [{"title": a.get("title"), "source": a.get("source"), "score": s} for a, s in hits],
        "intent": intent["name"],
    }

@app.route("/api/ask", methods=["POST", "OPTIONS"])
def api_ask():
    if request.method == "OPTIONS":
        return ("", 204)
    payload, dbg = get_json_payload()
    question = (payload.get("question") or "").strip()
    if not question:
        return json_error(400, "MISSING_FIELD", "–ü–æ–ª–µ 'question' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", dbg)
    try:
        result = _pipeline_answer(question)
        return jsonify({"ok": True, **result})
    except Exception as e:
        log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞")
        return json_error(500, "INTERNAL_ERROR", str(e))

# –ê–ª–∏–∞—Å –±–µ–∑ /api ‚Äî –Ω–∞ —Å–ª—É—á–∞–π –∫—Ä–∏–≤–æ–≥–æ –ø—Ä–æ–∫—Å–∏
@app.route("/ask", methods=["POST", "OPTIONS"])
def ask_alias():
    return api_ask()

@app.route("/api/healthz", methods=["GET"])
def healthz_alias():
    return api_health()

@app.route("/", methods=["GET"])
def root_404():
    return make_response("Not Found", 404)

if __name__ == "__main__":
    port = int(os.getenv("PORT", "5000"))
    app.run(host="0.0.0.0", port=port)
