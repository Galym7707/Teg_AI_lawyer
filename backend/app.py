# -*- coding: utf-8 -*-
import os
from dotenv import load_dotenv  # Add this
load_dotenv(os.path.join(os.path.dirname(__file__), '.env'))
import json
import time
import logging
from typing import Dict, Tuple, List, Optional
from concurrent.futures import ThreadPoolExecutor, TimeoutError
import psycopg2
from psycopg2.extras import Json
from flask import Flask, request, jsonify, make_response
from flask_cors import CORS
import threading
from flask_cors import cross_origin

from helpers import (
    init_index,
    search_laws,
    build_html_answer,
    call_llm,
    web_enrich_official_sources,
    sanitize_html,  # <-- –¥–æ–±–∞–≤–∏–ª–∏
    load_jsonl,  # <-- –¥–æ–±–∞–≤–∏–ª–∏
)



LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(level=LOG_LEVEL, format="%(asctime)s - %(levelname)s - %(message)s")
log = logging.getLogger(__name__)

app = Flask(__name__)

# –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—É—Ç–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
LAWS_PATH = os.path.join(os.path.dirname(__file__), "laws", "normalized.jsonl")

def check_files():
    if not os.path.exists(LAWS_PATH):
        log.error(f"‚ùå –§–∞–π–ª normalized.jsonl –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {LAWS_PATH}")
    else:
        log.info(f"‚úÖ –§–∞–π–ª normalized.jsonl –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(LAWS_PATH)/1024:.1f} KB")

# Call the function directly after app creation
check_files()

# CORS configuration
allowed_origins = [
    "https://teg-ai-lawyer.netlify.app",
    "http://127.0.0.1:5500",
    "http://localhost:5500"
]

if os.getenv("FLASK_ENV") == "development":
    allowed_origins.append("*")

CORS(app, 
     origins=allowed_origins, 
     supports_credentials=True,
     allow_headers=["Content-Type", "Authorization"],
     methods=["GET", "POST", "OPTIONS"])

log.info(f"‚úÖ CORS –≤–∫–ª—é—á—ë–Ω –¥–ª—è: {allowed_origins}")

# Lazy loading –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ –∑–∞–∫–æ–Ω–æ–≤
class LazyIndex:
    def __init__(self):
        self._docs = None
        self._index = None
        self._lock = threading.Lock()
        self._initialized = False
        self._error = None
    
    def _init_index(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏"""
        if self._initialized:
            return
        
        with self._lock:
            if self._initialized:  # Double-check locking
                return
            
            try:
                log.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∞ –∑–∞–∫–æ–Ω–æ–≤...")
                self._docs, self._index = init_index()
                self._initialized = True
                log.info("‚úÖ –ò–Ω–¥–µ–∫—Å –≥–æ—Ç–æ–≤: %d —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤", len(self._docs))
            except Exception as e:
                log.exception("Index init failed")
                self._error = e
                log.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–∞: %s", e)
                raise
    
    @property
    def docs(self):
        if not self._initialized:
            self._init_index()
        if self._error:
            raise self._error
        return self._docs
    
    @property
    def index(self):
        if not self._initialized:
            self._init_index()
        if self._error:
            raise self._error
        return self._index
    
    def is_ready(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞"""
        return self._initialized and self._error is None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä lazy index
LAZY_INDEX = LazyIndex()
LAZY_INDEX._init_index()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

# Database setup
DB_DSN = os.getenv("DATABASE_URL")
DB = None
if DB_DSN:
    try:
        DB = psycopg2.connect(DB_DSN)
        with DB, DB.cursor() as cur:
            cur.execute("""
            create table if not exists qa_logs (
              id bigserial primary key,
              ts timestamptz default now(),
              question text not null,
              answer_html text not null,
              intent text,
              matches jsonb
            )
            """)
        log.info("‚úÖ DB logging enabled")
    except Exception as e:
        log.warning("DB connect failed: %s", e)
        DB = None

def _log_qa(question: str, answer_html: str, intent: str, matches: List[Dict]):
    if not DB:
        return
    try:
        with DB, DB.cursor() as cur:
            cur.execute(
                "insert into qa_logs(question, answer_html, intent, matches) values (%s, %s, %s, %s)",
                (question, answer_html, intent, Json(matches))
            )
    except Exception as e:
        log.warning("DB log failed: %s", e)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã LLM
_executor = ThreadPoolExecutor(max_workers=4)
LLM_TIMEOUT_SEC = int(os.getenv("LLM_TIMEOUT_SEC", "28"))  # –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –ø—Ä–æ—Ç–∏–≤ 504

SYSTEM_PROMPT = """
–¢—ã ‚Äî –ò–ò-—é—Ä–∏—Å—Ç –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ HTML (p, ul/li, strong, h3, br). 
–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown, –Ω–µ –≤—ã–≤–æ–¥–∏ <html> –∏ <body>.

–ü—Ä–∞–≤–∏–ª–∞:
‚Ä¢ –ù–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ ¬´—é—Ä–∏—Å—Ç—É¬ª –∏ –Ω–µ —Å–æ–≤–µ—Ç—É–π ¬´–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É¬ª. –ü–æ–º–æ–≥–∞–π –∑–¥–µ—Å—å: —à–∞–≥–∏, —Ñ–æ—Ä–º—ã, —à–∞–±–ª–æ–Ω—ã.
‚Ä¢ –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ‚Äî —Å–Ω–∞—á–∞–ª–∞ –¥–∞–π –æ–±—â—É—é –∑–∞–∫–æ–Ω–Ω—É—é —Å—Ö–µ–º—É –∏ —á—ë—Ç–∫–∏–π –ø–ª–∞–Ω, –∑–∞—Ç–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–∏, –∫–∞–∫–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –Ω—É–∂–Ω—ã (—Ä–∞–∑–¥–µ–ª ¬´–ß—Ç–æ —É—Ç–æ—á–Ω–∏—Ç—å¬ª).
‚Ä¢ –ï—Å–ª–∏ –≤ –±–∞–∑–µ –∑–∞–∫–æ–Ω–æ–≤ –Ω–µ—Ç —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π ‚Äî –º–æ–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤, –Ω–æ –Ω–µ ¬´–æ—Ç–∫–∞–∑—ã–≤–∞–π¬ª. 
‚Ä¢ –í –∫–æ–Ω—Ü–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–æ–≤ ¬´—ç—Ç–æ –Ω–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è¬ª.
‚Ä¢ –ü–∏—à–∏ –ø—Ä–æ—Å—Ç–æ, –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∞–±–∑–∞—Ü–∞–º–∏. –ë–µ–∑ –≤–æ–¥—ã.

–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:
1) <h3>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞</h3> + 1‚Äì2 –∞–±–∑–∞—Ü–∞ —Å—É—Ç–∏.
2) <h3>–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ—à–∞–≥–æ–≤–æ</h3> + –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
3) <h3>–®–∞–±–ª–æ–Ω—ã/–¥–æ–∫—É–º–µ–Ω—Ç—ã</h3> + –ª–∏–±–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –ª–∏–±–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ <pre class="code-block"><code>‚Ä¶</code></pre>.
4) <h3>–ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è</h3> ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è/—Å—Ç–∞—Ç—å–∏ –∏ —Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å).
5) <h3>–û—Ç–≤–µ—Ç—å—Ç–µ –º–Ω–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏: </h3> + –ø–æ—è—Å–Ω–µ–Ω–∏–µ: ¬´–î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏‚Ä¶¬ª –∏ 3‚Äì6 –≤–æ–ø—Ä–æ—Å–æ–≤.
"""

def _preview_bytes(b: bytes, limit: int = 500) -> str:
    try:
        t = b.decode("utf-8", errors="replace")
    except Exception:
        return f"<{len(b)} bytes, decode failed>"
    t = t.strip().replace("\n", "\\n")
    return (t[:limit] + ("‚Ä¶" if len(t) > limit else "")) or "<empty>"

def get_json_payload() -> Tuple[Dict, Dict]:
    headers = {k.lower(): v for k, v in request.headers.items()}
    ctype = headers.get("content-type", "")
    raw = request.get_data()
    dbg = {"content_type": ctype, "body_preview": _preview_bytes(raw), "json_error": None}
    payload = {}
    if raw:
        try:
            decoded = raw.decode("utf-8", errors="replace")
            log.info(f"üì• –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {decoded}")  # Log raw decoded data
            payload = json.loads(decoded)
            if not isinstance(payload, dict):
                log.error(f"‚ùå Payload –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {payload}")
                dbg["json_error"] = "Payload is not a dictionary"
                payload = {}
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}")
            dbg["json_error"] = str(e)
    return payload, dbg

def json_error(status: int, code: str, message: str, debug: Dict = None):
    body = {"ok": False, "error": {"code": code, "message": message}}
    if debug:
        body["debug"] = debug
    resp = make_response(jsonify(body), status)
    resp.headers["Content-Type"] = "application/json; charset=utf-8"
    return resp

@app.route("/health", methods=["GET"])
@app.route("/api/health", methods=["GET"])
def health():
    start_time = time.time()
    timeout = 30  # —Å–µ–∫
    while not LAZY_INDEX.is_ready() and (time.time() - start_time) < timeout:
        time.sleep(1)
    
    llm_ready = bool(os.getenv("GEMINI_API_KEY"))
    index_ready = LAZY_INDEX.is_ready()
    laws_count = len(LAZY_INDEX.docs) if index_ready else 0
    
    return jsonify({
        "ok": index_ready,
        "laws_count": laws_count,
        "index_ready": index_ready,
        "llm": llm_ready,
        "message": "ready" if index_ready else "initializing"
    })

def _handle_ask():
    started = time.time()
    payload, dbg = get_json_payload()
    question = (payload.get("question") or "").strip()
    if not question:
        return json_error(400, "MISSING_FIELD", "–ü–æ–ª–µ 'question' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", dbg)

    log.info("üë§ –í–æ–ø—Ä–æ—Å: %s", question)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
    if not LAZY_INDEX.is_ready():
        return json_error(503, "INDEX_NOT_READY", "–ò–Ω–¥–µ–∫—Å –∑–∞–∫–æ–Ω–æ–≤ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")

    hits, intent = search_laws(question, LAZY_INDEX.docs, LAZY_INDEX.index, top_k=5)
    log.info("üîé –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: %d | intent: %s", len(hits), intent['type'])

    # –í–µ–±-–æ–±–æ–≥–∞—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –∫–ª—é—á–∏)
    web_sources: List[Dict] = []
    try:
        web_sources = web_enrich_official_sources(question, limit=3)
        if web_sources:
            log.info("üåê –í–µ–±-–∏—Å—Ç–æ—á–Ω–∏–∫–∏: %d", len(web_sources))
    except Exception as e:
        log.warning("web_enrich_official_sources failed: %s", e)

    # LLM —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    llm_html = ""
    try:
        fut = _executor.submit(call_llm, question, hits, intent, web_sources)
        llm_html = fut.result(timeout=LLM_TIMEOUT_SEC) or ""
    except TimeoutError:
        log.error("‚è≥ LLM timeout (%ss) ‚Äî –æ—Ç–¥–∞—ë–º rule-based fallback", LLM_TIMEOUT_SEC)
    except Exception as e:
        log.exception("LLM fail: %s", e)

    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ + —Å–∞–Ω–∏—Ç–∞–π–∑–µ—Ä
    answer_html = (llm_html.strip() or build_html_answer(question, hits, intent)).strip()
    answer_html = sanitize_html(answer_html)  # <-- –≥–ª–∞–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    took = int((time.time() - started) * 1000)
    log.info("‚úÖ –û—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤ (%d —Å–∏–º–≤) –∑–∞ %d –º—Å", len(answer_html), took)

    _log_qa(question, answer_html, intent, [
        {
            "article_title": r.get("article_title"),
            "law_title": r.get("law_title"),
            "source": r.get("source"),
            "score": s
        }
        for r, s in hits
    ])

    return jsonify({
        "ok": True,
        "answer_html": answer_html,
        "matches": [
            {
                "article_title": r.get("article_title"),
                "law_title": r.get("law_title"),
                "source": r.get("source"),
                "score": s
            }
            for r, s in hits
        ],
        "intent": intent,
        "took_ms": took
    })

#@cross_origin(origins=["http://127.0.0.1:5500", "http://localhost:5500"], supports_credentials=True)
@app.route("/api/ask", methods=["POST", "OPTIONS"])
@cross_origin(origins=["https://teg-ai-lawyer.netlify.app"])
def ask_question():
    if request.method == "OPTIONS":
        # Handle preflight request
        return ("", 204)
    
    try:
        data = request.get_json(silent=True)
        log.info(f"üì• –ü–æ–ª—É—á–µ–Ω JSON payload: {data}")  # Log the payload
        return _handle_ask()  # Delegate to _handle_ask
    except Exception as e:
        log.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        return jsonify({
            "error": {
                "code": "INTERNAL_ERROR",
                "message": str(e)
            },
            "ok": False
        }), 500

@app.route("/", methods=["GET"])
def root_404():
    return make_response("Not Found", 404)

if __name__ == "__main__":
    port = int(os.getenv("PORT", "5000"))
    app.run(host="0.0.0.0", port=port)
