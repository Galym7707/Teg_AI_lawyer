# -*- coding: utf-8 -*-
import os
import time
import re
import logging
from typing import Dict, List, Tuple
from flask import Flask, request, jsonify, make_response, Blueprint
from flask_cors import CORS
import bleach

from helpers import load_laws, search_laws, detect_intent

# ========== –õ–û–ì–ò ==========
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(level=LOG_LEVEL, format="%(asctime)s - %(levelname)s - %(message)s")
log = logging.getLogger(__name__)

def _preview_bytes(b: bytes, limit: int = 600) -> str:
    try:
        t = b.decode("utf-8", errors="replace")
    except Exception:
        return f"<{len(b)} bytes, decode failed>"
    t = t.strip().replace("\n", "\\n")
    return (t[:limit] + ("‚Ä¶" if len(t) > limit else "")) or "<empty>"

# ========== APP / CORS ==========
app = Flask(__name__)
api = Blueprint("api", __name__, url_prefix="/api")

FRONTEND_ORIGIN = os.getenv("FRONTEND_ORIGIN", "")
if FRONTEND_ORIGIN:
    CORS(app, origins=[FRONTEND_ORIGIN], supports_credentials=True)
    log.info(f"‚úÖ CORS –≤–∫–ª—é—á—ë–Ω –¥–ª—è: {FRONTEND_ORIGIN}")
else:
    CORS(app, supports_credentials=True)
    log.warning("‚ö†Ô∏è FRONTEND_ORIGIN –Ω–µ –∑–∞–¥–∞–Ω ‚Äî CORS –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö (dev only).")

# ========== –ë–ê–ó–ê –ó–ê–ö–û–ù–û–í ==========
LAWS_PATH = os.getenv("LAWS_PATH", "laws/kazakh_laws.json")
try:
    LAWS = load_laws(LAWS_PATH)
    log.info(f"‚úÖ –ò–Ω–¥–µ–∫—Å –∑–∞–∫–æ–Ω–æ–≤ –≥–æ—Ç–æ–≤: {len(LAWS)} —Å—Ç–∞—Ç–µ–π")
except Exception as e:
    LAWS = []
    log.exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–æ–Ω—ã: {e}")

# ========== LLM (Gemini) ==========
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "").strip()
GEMINI_MODEL = os.getenv("GEMINI_MODEL", "gemini-1.5-flash")
MODEL = None

SYSTEM_PROMPT = """
–¢—ã ‚Äî –ò–ò-—é—Ä–∏—Å—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω.
–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –≤ –ß–ò–°–¢–û–ú HTML (–±–µ–∑ Markdown), –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ç–µ–≥–∏: <p>, <ul>, <li>, <strong>, <em>, <h3>, <a>, <br>.

–°–¢–ò–õ–¨ –ò –°–û–î–ï–†–ñ–ê–ù–ò–ï:
- –ë–µ–∑ –≤–æ–¥—ã –∏ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑. –°–Ω–∞—á–∞–ª–∞ –∫—Ä–∞—Ç–∫–∞—è <strong>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞</strong>, –∑–∞—Ç–µ–º —á—ë—Ç–∫–∏–π <strong>–ê–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π</strong> –∏ <strong>–ü–µ—Ä–µ—á–µ–Ω—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</strong> (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ).
- –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –Ω–æ—Ä–º—ã –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: —É–∫–∞–∑—ã–≤–∞–π <strong>–Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∞</strong> –∏ <strong>—Å—Ç–∞—Ç—å—é/—Ä–∞–∑–¥–µ–ª</strong>. –ï—Å–ª–∏ –µ—Å—Ç—å source ‚Äî –¥–æ–±–∞–≤—å —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ <a>.
- –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç, –¥–∞–π –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –æ–±—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ –ø—Ä–∏–º–µ–Ω–∏–º—ã–º –∞–∫—Ç–∞–º –†–ö (–±–µ–∑ –≤—ã–¥—É–º–æ–∫) –∏ —É–∫–∞–∂–∏, –∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç.
- –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã –≤–∏–¥–∞ ¬´–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —é—Ä–∏—Å—Ç—É / –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —É —é—Ä–∏—Å—Ç–∞ / –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –¶–û–ù –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è¬ª. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏, —Ñ–æ—Ä–º—ã, –∫—É–¥–∞ –Ω–∞–∂–∞—Ç—å/–∫—É–¥–∞ –ø–æ–¥–∞—Ç—å, –∫–∞–∫–∏–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å.
- –ö–∞–∂–¥–∞—è –º—ã—Å–ª—å ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π <p>. –°–ø–∏—Å–∫–∏ ‚Äî —á–µ—Ä–µ–∑ <ul><li>... </li></ul>.

–®–∞–±–ª–æ–Ω —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
<h3>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞</h3>
<p>–ö–æ—Ä–æ—Ç–∫–æ –ø–æ —Å—É—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø—Ä–∏–º–µ–Ω–∏–º—ã—Ö –∞–∫—Ç–∞—Ö.</p>

<h3>–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ—à–∞–≥–æ–≤–æ</h3>
<ul>
<li><strong>–®–∞–≥ 1.</strong> ...</li>
<li><strong>–®–∞–≥ 2.</strong> ...</li>
</ul>

<h3>–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</h3>
<ul>
<li>...</li>
</ul>

<h3>–ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è</h3>
<ul>
<li><strong>–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∞</strong> ‚Äî —Å—Ç–∞—Ç—å—è/–ø—É–Ω–∫—Ç. <a href="URL">–ò—Å—Ç–æ—á–Ω–∏–∫</a></li>
</ul>
"""

def _llm_bootstrap():
    global MODEL
    if MODEL is not None:
        return
    if not GEMINI_API_KEY:
        raise RuntimeError("GEMINI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ò–ò –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
    import google.generativeai as genai
    genai.configure(api_key=GEMINI_API_KEY)
    MODEL = genai.GenerativeModel(GEMINI_MODEL, system_instruction=SYSTEM_PROMPT)
    log.info(f"ü§ñ Gemini –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {GEMINI_MODEL}")

def _sanitize_html(html: str) -> str:
    allowed_tags = ["p", "ul", "li", "strong", "em", "h3", "a", "br"]
    allowed_attrs = {"a": ["href", "title", "target", "rel"]}
    cleaned = bleach.clean(html, tags=allowed_tags, attributes=allowed_attrs, strip=True)
    return cleaned.replace("<a ", '<a target="_blank" rel="noopener noreferrer" ')

_REFERRAL_RE = re.compile(
    r"(–æ–±—Ä–∞—Ç–∏—Ç(–µ—Å—å|–µ|—Å—è)\s+–∫\s+—é—Ä–∏—Å—Ç—É|–ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç[–µ—Å—è]+\s+—É\s+—é—Ä–∏—Å—Ç–∞|"
    r"–æ–±—Ä–∞—Ç–∏—Ç[—å–µ]+\s+–≤\s+—Ü–æ–Ω|"
    r"—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è\s+–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è\s+–∫\s+–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É\s+—é—Ä–∏—Å—Ç—É)",
    re.IGNORECASE
)

def _enforce_style(html: str) -> str:
    # –í—ã—á–∏—â–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ —Å–º—è–≥—á–∞–µ–º —Ç–æ, —á—Ç–æ –ø—Ä–æ—Å–∏—Ç ¬´–∫—É–¥–∞-—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è¬ª.
    html = _REFERRAL_RE.sub(
        "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∏–∂–µ —à–∞–≥–∏ –∏ —à–∞–±–ª–æ–Ω—ã ‚Äî —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è",
        html,
    )
    # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ <p></p>
    html = re.sub(r"<p>\s*</p>", "", html)
    return html

def _build_llm_context(question: str, matches: List[Tuple[Dict, float]], intent_name: str) -> str:
    def cut(s: str, n: int = 900) -> str:
        s = (s or "").strip()
        return (s[:n] + "‚Ä¶") if len(s) > n else s

    lines = [f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}", ""]
    lines.append("–ö–æ–Ω—Ç–µ–∫—Å—Ç (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –Ω–æ—Ä–º—ã –∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã):")
    for art, score in matches:
        title = art.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        src = art.get("source") or ""
        frag = cut(art.get("text", ""))
        lines.append(f"- {title} | –∏—Å—Ç–æ—á–Ω–∏–∫: {src if src else '‚Äî'}")
        if frag:
            lines.append(f"  –§—Ä–∞–≥–º–µ–Ω—Ç: {frag}")
        lines.append("")
    if not matches:
        lines.append("–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–æ—Ä–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    # –ñ—ë—Å—Ç–∫–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ —Å—Ç–∏–ª—é
    lines.append(
        "\n–°—Ñ–æ—Ä–º–∏—Ä—É–π –ò–¢–û–ì–û–í–´–ô –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É –∏ –ø—Ä–∞–≤–∏–ª–∞–º –∏–∑ system_instruction. "
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã –ø—Ä–æ ¬´–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —é—Ä–∏—Å—Ç—É¬ª. –î–∞–π —á—ë—Ç–∫–∏–µ —à–∞–≥–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)."
    )
    return "\n".join(lines)

def _generate_with_llm(question: str, matches: List[Tuple[Dict, float]], intent_name: str) -> str:
    _llm_bootstrap()
    prompt = _build_llm_context(question, matches, intent_name)
    last_err = None
    for i in range(3):
        try:
            resp = MODEL.generate_content(
                prompt,
                generation_config={"temperature": 0.2, "max_output_tokens": 2048},
            )
            txt = (resp.text or "").strip()
            if not txt:
                raise RuntimeError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
            html = _sanitize_html(txt)
            html = _enforce_style(html)
            return html
        except Exception as e:
            last_err = e
            log.warning(f"LLM attempt {i+1}/3 failed: {e}")
            time.sleep(0.8 * (i + 1))
    raise RuntimeError(f"LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ —Ä–µ—Ç—Ä–∞–µ–≤: {last_err}")

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ==========
def _get_json_payload() -> (Dict, Dict):
    headers = {k.lower(): v for k, v in request.headers.items()}
    ctype = headers.get("content-type", "")
    raw = request.get_data()
    log.debug(
        "‚û°Ô∏è  Incoming %s %s | CT: %s | H: %s | body: %s",
        request.method, request.path, ctype, headers, _preview_bytes(raw)
    )

    payload = None
    err = None
    try:
        payload = request.get_json(silent=True, force=False)
        if payload is None and raw:
            import json
            payload = json.loads(raw.decode("utf-8", errors="replace"))
    except Exception as e:
        err = f"JSON parse failed: {e}"

    return payload or {}, {"content_type": ctype, "body_preview": _preview_bytes(raw), "json_error": err}

def _json_error(status: int, code: str, message: str, debug: Dict = None):
    body = {"ok": False, "error": {"code": code, "message": message}}
    if debug:
        body["debug"] = debug
    resp = make_response(jsonify(body), status)
    resp.headers["Content-Type"] = "application/json; charset=utf-8"
    return resp

# ========== –†–û–£–¢–´ ==========
@api.route("/health", methods=["GET"])
def api_health():
    return jsonify({"ok": True, "laws_count": len(LAWS), "llm": bool(GEMINI_API_KEY), "message": "alive"})

@api.route("/ask", methods=["POST", "OPTIONS"])
def api_ask():
    if request.method == "OPTIONS":
        return ("", 204)

    payload, dbg = _get_json_payload()
    question = (payload.get("question") or "").strip()
    if not question:
        return _json_error(400, "MISSING_FIELD", "–ü–æ–ª–µ 'question' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", dbg)

    try:
        intent = detect_intent(question)
        matches = search_laws(question, LAWS, top_k=3, intent=intent)
        used_llm = True
        try:
            answer_html = _generate_with_llm(question, matches, intent.get("name"))
        except Exception as e:
            used_llm = False
            log.error(f"‚ùå LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –æ—Ç–¥–∞—ë–º —Ñ–æ–ª–±—ç–∫: {e}")
            answer_html = _sanitize_html("""
                <p><strong>–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</strong></p>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ. –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.</p>
            """)

        return jsonify({
            "ok": True,
            "answer_html": answer_html,
            "matches": [{"title": a.get("title"), "source": a.get("source")} for a, _ in matches],
            "intent": intent.get("name"),
            "used_llm": used_llm
        })
    except Exception as e:
        log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞")
        return _json_error(500, "INTERNAL_ERROR", str(e))

# –ö–æ—Ä–Ω–µ–≤–æ–π
@app.route("/", methods=["GET"])
def root():
    return make_response("Backend is up. Use /api/ask", 200)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º blueprint
app.register_blueprint(api)

if __name__ == "__main__":
    port = int(os.getenv("PORT", "5000"))
    app.run(host="0.0.0.0", port=port)
