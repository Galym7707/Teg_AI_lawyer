# -*- coding: utf-8 -*-
import os
import time
import logging
from typing import Dict, List, Tuple
from flask import Flask, request, jsonify, make_response
from flask_cors import CORS

import bleach  # –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ HTML –æ—Ç LLM
from helpers import load_laws, search_laws  # –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ (–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM)

# ========== –õ–û–ì–ò ==========
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(level=LOG_LEVEL, format="%(asctime)s - %(levelname)s - %(message)s")
log = logging.getLogger(__name__)

def _preview_bytes(b: bytes, limit: int = 600) -> str:
    try:
        t = b.decode("utf-8", errors="replace")
    except Exception:
        return f"<{len(b)} bytes, decode failed>"
    t = t.strip().replace("\n", "\\n")
    return (t[:limit] + ("‚Ä¶" if len(t) > limit else "")) or "<empty>"

# ========== APP / CORS ==========
app = Flask(__name__)
FRONTEND_ORIGIN = os.getenv("FRONTEND_ORIGIN", "")
if FRONTEND_ORIGIN:
    CORS(app, origins=[FRONTEND_ORIGIN], supports_credentials=True)
    log.info(f"‚úÖ CORS –≤–∫–ª—é—á—ë–Ω –¥–ª—è: {FRONTEND_ORIGIN}")
else:
    CORS(app, supports_credentials=True)
    log.warning("‚ö†Ô∏è FRONTEND_ORIGIN –Ω–µ –∑–∞–¥–∞–Ω ‚Äî CORS –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö (dev only).")

# ========== –ó–ê–ö–û–ù–´ (–ö–ê–ó) ==========
LAWS_PATH = os.getenv("LAWS_PATH", "laws/kazakh_laws.json")
try:
    LAWS = load_laws(LAWS_PATH)
    log.info(f"‚úÖ –ò–Ω–¥–µ–∫—Å –∑–∞–∫–æ–Ω–æ–≤ –≥–æ—Ç–æ–≤: {len(LAWS)} —Å—Ç–∞—Ç–µ–π")
except Exception as e:
    LAWS = []
    log.exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–æ–Ω—ã: {e}")

# ========== LLM (Gemini ‚Äî –í–°–ï–ì–î–ê –ò–°–ü–û–õ–¨–ó–£–ï–ú) ==========
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "").strip()
GEMINI_MODEL = os.getenv("GEMINI_MODEL", "gemini-1.5-flash")
MODEL = None

SYSTEM_PROMPT = """
–¢—ã ‚Äî –ò–ò-—é—Ä–∏—Å—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω.
–û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –≤ –ß–ò–°–¢–û–ú HTML (–±–µ–∑ Markdown), –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ: <p>, <ul>, <li>, <strong>, <em>, <h3>, <a>.
–ü—Ä–∞–≤–∏–ª–∞:
1) –°–Ω–∞—á–∞–ª–∞ –∫—Ä–∞—Ç–∫–∞—è –Æ–†–ò–î–ò–ß–ï–°–ö–ê–Ø –û–¶–ï–ù–ö–ê –ø–æ —Å—É—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞.
2) –ó–∞—Ç–µ–º ‚Äî –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –®–ê–ì–ò (–∞–ª–≥–æ—Ä–∏—Ç–º, –∫—É–¥–∞ –∏–¥—Ç–∏/—á—Ç–æ –ø–∏—Å–∞—Ç—å).
3) –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –Ω–æ—Ä–º—ã ‚Äî —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∞ –∏ —Å—Ç–∞—Ç—å—é/—Ä–∞–∑–¥–µ–ª, –¥–æ–±–∞–≤—å —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞.
4) –ï—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö –Ω–æ—Ä–º –Ω–µ—Ç ‚Äî –¥–∞–π –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –æ–±—â–∏–π —Ä–∞–∑–±–æ—Ä –ø–æ –¢–ö –†–ö/–ì–ö –†–ö –∏ –ø–æ–ø—Ä–æ—Å–∏ –Ω—É–∂–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏ —à–∞–≥–∏.
5) –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π **–∑–≤—ë–∑–¥–æ—á–∫–∏** –∏ Markdown, —Ç–æ–ª—å–∫–æ HTML. –ö–∞–∂–¥—ã–π –∞–±–∑–∞—Ü ‚Äî <p>...</p>.
6) –ü–∏—à–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, —è—Å–Ω–æ –∏ –ø–æ –¥–µ–ª—É. –ù–µ —É—Ö–æ–¥–∏ –≤ ¬´—è –≤—Å–µ–≥–æ –ª–∏—à—å –ò–ò¬ª.
"""

def _llm_bootstrap():
    global MODEL
    if MODEL is not None:
        return
    if not GEMINI_API_KEY:
        raise RuntimeError("GEMINI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ò–ò –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
    import google.generativeai as genai
    genai.configure(api_key=GEMINI_API_KEY)
    MODEL = genai.GenerativeModel(GEMINI_MODEL, system_instruction=SYSTEM_PROMPT)
    log.info(f"ü§ñ Gemini –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {GEMINI_MODEL}")

def _build_llm_context(question: str, matches: List[Tuple[Dict, float]], intent_name: str) -> str:
    """
    –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: —Å–ø–∏—Å–æ–∫ –Ω–æ—Ä–º (title, source) + —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç.
    """
    def _snippet(text: str, max_len: int = 700) -> str:
        import re
        t = (text or "").strip()
        if not t:
            return ""
        sentences = re.split(r"(?<=[\.\!\?])\s+", t)
        # –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–µ, —á—Ç–æ–±—ã –ª–æ–≤–∏—Ç—å —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ –∏ —Ç.–ø.
        topic = {
            "termination": ["—É–≤–æ–ª", "—É–≤–æ–ª—å–Ω", "—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω", "–ø—Ä–µ–∫—Ä–∞—â–µ–Ω", "—Ç—Ä—É–¥", "—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª", "—Ä–∞–±–æ—Ç–Ω–∏–∫", "–¥–æ–≥–æ–≤–æ—Ä"],
            "rental": ["–∞—Ä–µ–Ω–¥", "–Ω–∞–π–º", "–∫–≤–∞—Ä—Ç–∏—Ä", "–∂–∏–ª—å", "—Å—ä–µ–º", "–∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å", "–∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä"],
        }.get((intent_name or "generic").lower(), [])
        for s in sentences:
            if any(k in s.lower() for k in topic):
                s = s.strip()
                return (s[:max_len] + "‚Ä¶") if len(s) > max_len else s
        head = t
        return (head[:max_len] + "‚Ä¶") if len(head) > max_len else head

    lines = [f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}", "", "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –Ω–æ—Ä–º—ã –∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã:"]
    for art, score in matches:
        ttl = art.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        src = art.get("source") or ""
        snp = _snippet(art.get("text", ""))
        lines.append(f"- {ttl} | –∏—Å—Ç–æ—á–Ω–∏–∫: {src if src else '‚Äî'}")
        if snp:
            lines.append(f"  –§—Ä–∞–≥–º–µ–Ω—Ç: {snp}")
        lines.append("")
    if not matches:
        lines.append("–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–æ—Ä–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ. –î–∞–π –æ–±—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ –¥–µ–π—Å—Ç–≤—É—é—â–µ–º—É –ø—Ä–∞–≤—É –†–ö.")
    return "\n".join(lines)

def _sanitize_html(html: str) -> str:
    allowed_tags = ["p", "ul", "li", "strong", "em", "h3", "a", "br"]
    allowed_attrs = {"a": ["href", "title", "target", "rel"]}
    cleaned = bleach.clean(html, tags=allowed_tags, attributes=allowed_attrs, strip=True)
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–∏
    return cleaned.replace("<a ", '<a target="_blank" rel="noopener noreferrer" ')

def _generate_with_llm(question: str, matches: List[Tuple[Dict, float]], intent_name: str) -> str:
    _llm_bootstrap()
    user_prompt = (
        _build_llm_context(question, matches, intent_name)
        + "\n\n–°—Ñ–æ—Ä–º–∏—Ä—É–π –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ HTML –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –∏–∑ system_instruction."
    )
    last_err = None
    for i in range(3):
        try:
            resp = MODEL.generate_content(
                user_prompt,
                generation_config={"temperature": 0.2, "max_output_tokens": 2048},
            )
            txt = (resp.text or "").strip()
            if not txt:
                raise RuntimeError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
            return _sanitize_html(txt)
        except Exception as e:
            last_err = e
            log.warning(f"LLM attempt {i+1}/3 failed: {e}")
            time.sleep(0.8 * (i + 1))
    raise RuntimeError(f"LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ —Ä–µ—Ç—Ä–∞–µ–≤: {last_err}")

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ==========
def get_json_payload() -> (Dict, Dict):
    headers = {k.lower(): v for k, v in request.headers.items()}
    ctype = headers.get("content-type", "")
    raw = request.get_data()
    log.debug(
        "‚û°Ô∏è  Incoming %s %s | CT: %s | H: %s | body: %s",
        request.method, request.path, ctype, headers, _preview_bytes(raw)
    )

    payload = None
    err = None
    try:
        payload = request.get_json(silent=True, force=False)
        if payload is None and raw:
            import json
            payload = json.loads(raw.decode("utf-8", errors="replace"))
    except Exception as e:
        err = f"JSON parse failed: {e}"

    return payload or {}, {"content_type": ctype, "body_preview": _preview_bytes(raw), "json_error": err}

def json_error(status: int, code: str, message: str, debug: Dict = None):
    body = {"ok": False, "error": {"code": code, "message": message}}
    if debug:
        body["debug"] = debug
    resp = make_response(jsonify(body), status)
    resp.headers["Content-Type"] = "application/json; charset=utf-8"
    return resp

# ========== –†–û–£–¢–´ ==========
@app.route("/health", methods=["GET"])
def health():
    return jsonify({"ok": True, "laws_count": len(LAWS), "llm": True, "message": "alive"})

@app.route("/ask", methods=["POST", "OPTIONS"])
@app.route("/chat", methods=["POST", "OPTIONS"])
def ask():
    if request.method == "OPTIONS":
        return ("", 204)

    payload, dbg = get_json_payload()
    question = (payload.get("question") or "").strip()
    if not question:
        return json_error(400, "MISSING_FIELD", "–ü–æ–ª–µ 'question' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", dbg)

    try:
        matches, intent = search_laws(question, LAWS, top_k=3)
        intent_name = (intent or {}).get("name") or "generic"

        # –í–°–ï–ì–î–ê –≤—ã–∑—ã–≤–∞–µ–º LLM
        used_llm = True
        try:
            answer_html = _generate_with_llm(question, matches, intent_name)
        except Exception as e:
            used_llm = False
            log.error(f"‚ùå LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –æ—Ç–¥–∞—ë–º —Ñ–æ–ª–±—ç–∫: {e}")
            answer_html = _sanitize_html(f"""
                <p><strong>–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</strong></p>
                <p>–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–∑–∂–µ.</p>
                <h3>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
                <ul>
                    <li>–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ (–∫—Ç–æ/—á—Ç–æ/–∫–æ–≥–¥–∞/–∫–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –µ—Å—Ç—å).</li>
                    <li>–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å—Ä–æ—á–Ω—ã–π, —É–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫¬ª, ¬´–∞—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è¬ª –∏ —Ç.–¥.).</li>
                </ul>
            """)

        return jsonify({
            "ok": True,
            "answer_html": answer_html,
            "matches": [{"title": a.get("title"), "source": a.get("source")} for a, _ in matches],
            "intent": intent_name,
            "used_llm": used_llm
        })
    except Exception as e:
        log.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞")
        return json_error(500, "INTERNAL_ERROR", str(e))

@app.route("/", methods=["GET"])
def root_404():
    return make_response("Not Found", 404)

if __name__ == "__main__":
    port = int(os.getenv("PORT", "5000"))
    app.run(host="0.0.0.0", port=port)
