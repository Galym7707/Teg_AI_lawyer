# -*- coding: utf-8 -*-
import os
import json
import logging
import re
from typing import List, Dict, Tuple

import google.generativeai as genai

log = logging.getLogger(__name__)

# ---------- LAWS ----------
def load_laws(path: str) -> List[Dict]:
    if not os.path.isabs(path):
        base = os.path.dirname(os.path.abspath(__file__))
        path = os.path.join(base, path)
    with open(path, "r", encoding="utf-8") as f:
        data = json.load(f)
    # –æ–∂–∏–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å title, text, source
    cleaned = []
    for item in data:
        t = (item.get("text") or "").strip()
        title = (item.get("title") or "").strip()
        source = item.get("source")
        if not t:
            continue
        cleaned.append({"title": title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è", "text": t, "source": source})
    return cleaned

def _tokenize(s: str) -> List[str]:
    return re.findall(r"[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\-]+", s.lower())

def _score(query_tokens: List[str], text: str) -> float:
    if not text:
        return 0.0
    tt = _tokenize(text)
    if not tt:
        return 0.0
    qset = set(query_tokens)
    tset = set(tt)
    inter = len(qset & tset)
    return inter / (len(qset) + 1e-6)

def search_laws(question: str, laws: List[Dict], top_k: int = 3) -> Tuple[List[Tuple[Dict, float]], Dict]:
    qtokens = _tokenize(question)
    scored = []
    for art in laws:
        score = (
            _score(qtokens, art.get("title", "")) * 2.0 +
            _score(qtokens, art.get("text", "")) * 1.0
        )
        if score > 0:
            scored.append((art, score))
    scored.sort(key=lambda x: x[1], reverse=True)
    hits = scored[:top_k]
    intent = {"name": "generic"}
    return hits, intent

def build_html_answer(question: str, hits: List[Tuple[Dict, float]], intent: Dict) -> str:
    # –ø—Ä–æ—Å—Ç–æ–π fallback-–æ—Ç–≤–µ—Ç –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º
    parts = [f"<h3>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞</h3>"]
    if hits:
        parts.append(f"<p>–ù–∏–∂–µ ‚Äî –Ω–æ—Ä–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É.</p>")
        parts.append("<ul>")
        for art, s in hits:
            title = art.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            src = art.get("source") or ""
            parts.append(f"<li><strong>{title}</strong>{' ‚Äî ' + src if src else ''}</li>")
        parts.append("</ul>")
    else:
        parts.append("<p>–ü–æ –≤–∞—à–µ–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ –ø—Ä—è–º—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. "
                     "–ú–æ–≥—É –¥–∞—Ç—å –æ–±—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π –∏ —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.</p>")

    # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫
    parts.append("<h3>–ß—Ç–æ –¥–µ–ª–∞—Ç—å</h3>")
    parts.append("<ul>"
                 "<li>–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Ü–µ–ª—å –∏ —Å–∏—Ç—É–∞—Ü–∏—é –≤ –¥–µ—Ç–∞–ª—è—Ö (–¥–∞—Ç—ã, —Å—Ç–æ—Ä–æ–Ω—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã).</li>"
                 "<li>–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –±–∞–∑–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (—É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏, –¥–æ–≥–æ–≤–æ—Ä—ã, –ø–µ—Ä–µ–ø–∏—Å–∫—É).</li>"
                 "<li>–°–ª–µ–¥—É–π—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö –≥–æ—Å–ø–æ—Ä—Ç–∞–ª–æ–≤.</li>"
                 "</ul>")
    return "\n".join(parts)

# ---------- LLM ----------
def _init_llm():
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        log.warning("GEMINI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî LLM –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á—ë–Ω.")
        return None
    genai.configure(api_key=api_key)
    model_name = os.getenv("GEMINI_MODEL", "gemini-1.5-flash")
    model = genai.GenerativeModel(
        model_name=model_name,
        generation_config={"temperature": 0.3, "max_output_tokens": 2048},
        system_instruction=(
            "–¢—ã ‚Äî –ò–ò-—é—Ä–∏—Å—Ç –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω. "
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ –ß–ò–°–¢–û–ú HTML (–±–µ–∑ Markdown): <p>, <ul>, <ol>, <li>, <strong>, <em>, <h3>, <a>. "
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: "
            "1) <h3>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞</h3> ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. "
            "2) <h3>–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ—à–∞–≥–æ–≤–æ</h3> ‚Äî 3‚Äì7 —á—ë—Ç–∫–∏—Ö —à–∞–≥–æ–≤. "
            "3) <h3>–ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è</h3> ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏/–∞–∫—Ç—ã, –µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ. "
            "4) <h3>–®–∞–±–ª–æ–Ω—ã/–¥–æ–∫—É–º–µ–Ω—Ç—ã</h3> ‚Äî –ø–µ—Ä–µ—á–∏—Å–ª–∏, —á—Ç–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å. "
            "–ù–µ –ø–∏—à–∏ ¬´–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —é—Ä–∏—Å—Ç—É¬ª, –¥–∞–π —Å–∞–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã. "
            "–ï—Å–ª–∏ –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ö –Ω–µ—Ç —Ç–æ—á–Ω—ã—Ö –Ω–æ—Ä–º ‚Äî –¥–∞–π –æ–±—â–∏–π, –Ω–æ –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞."
        )
    )
    log.info("ü§ñ Gemini –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: %s", model_name)
    return model

_MODEL = _init_llm()

def call_llm(question: str, hits: List[Tuple[Dict, float]]) -> str:
    if _MODEL is None:
        return ""
    # –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    ctx = []
    for art, score in hits[:3]:
        title = art.get("title", "")
        src = art.get("source") or ""
        frag = art.get("text", "")
        if len(frag) > 1200:
            frag = frag[:1200] + "‚Ä¶"
        ctx.append(f"<p><strong>{title}</strong> ({src})</p><p>{frag}</p>")
    context_html = "\n".join(ctx)

    prompt = (
        "<h3>–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>"
        f"<p>{question}</p>"
        "<h3>–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)</h3>"
        f"{context_html or '<p>–ù–µ—Ç —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –±–∞–∑–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.</p>'}"
        "<p>–°—Ñ–æ—Ä–º–∏—Ä—É–π –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ HTML (–±–µ–∑ Markdown), –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.</p>"
    )

    resp = _MODEL.generate_content(prompt)
    if not getattr(resp, "text", None):
        return ""
    # Google –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å Markdown ‚Äî –≤ —Å–∏—Å—Ç–µ–º–∫–µ —É–∂–µ –ø–æ–ø—Ä–æ—Å–∏–ª–∏ HTML, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π:
    txt = resp.text.strip()
    # –ø—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ **...** -> <strong>‚Ä¶</strong>
    txt = re.sub(r"\*\*(.+?)\*\*", r"<strong>\1</strong>", txt)
    txt = txt.replace("\n", "<br>")
    return txt
