# -*- coding: utf-8 -*-
import os
import re
import json
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—É—Ç–µ–π (–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
ROOT = Path(__file__).parent
RAW_LAWS = ROOT / "backend" / "laws" / "kazakh_laws.json"
NORMALIZED_LAWS = ROOT / "backend" / "laws" / "normalized.jsonl"

# –†–µ–≥—É–ª—è—Ä–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
ARTICLE_PAT = re.compile(r"(–°—Ç–∞—Ç—å—è \d+[^\n]*)\n", re.IGNORECASE)
NOISE_PATTERNS = [r"—Å–Ω–æ—Å–∫–∞\..*", r"–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ.*", r"–°–û–î–ï–†–ñ–ê–ù–ò–ï.*"]

def clean_text(text: str) -> str:
    """–ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
    for pattern in NOISE_PATTERNS:
        text = re.sub(pattern, "", text, flags=re.DOTALL|re.IGNORECASE)
    return re.sub(r"\n{3,}", "\n\n", text).strip()

def process_law(law: Dict) -> List[Dict]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞"""
    articles = []
    text = clean_text(law.get("text", ""))
    
    for match in ARTICLE_PAT.finditer(text):
        article = {
            "law_title": law.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
            "article_title": match.group(1),
            "source": law.get("source", ""),
            "plain_text": text[match.start():match.end() + 2000]  # –ë–µ—Ä–µ–º ~2000 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        }
        articles.append(article)
    
    return articles or [{
        "law_title": law.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
        "article_title": "–û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è",
        "source": law.get("source", ""),
        "plain_text": text[:5000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
    }]

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω–≤–µ–π–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    log.info(f"üîß –ó–∞–≥—Ä—É–∑–∫–∞ —Å—ã—Ä—ã—Ö –∑–∞–∫–æ–Ω–æ–≤ –∏–∑ {RAW_LAWS}")
    
    if not RAW_LAWS.exists():
        raise FileNotFoundError(f"–§–∞–π–ª {RAW_LAWS} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    with open(RAW_LAWS, "r", encoding="utf-8") as f:
        laws = json.load(f)
    
    NORMALIZED_LAWS.parent.mkdir(parents=True, exist_ok=True)
    
    with open(NORMALIZED_LAWS, "w", encoding="utf-8") as out:
        for law in laws:
            for article in process_law(law):
                json.dump(article, out, ensure_ascii=False)
                out.write("\n")
    
    log.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(laws)} –∑–∞–∫–æ–Ω–æ–≤. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ {NORMALIZED_LAWS}")

if __name__ == "__main__":
    main()